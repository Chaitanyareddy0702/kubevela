# Code generated by KubeVela templates. DO NOT EDIT. Please edit the original cue file.
# Definition source cue file: vela-templates/definitions/internal/resource.cue
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: Add resource requests and limits on K8s pod for your workload which follows the pod spec in path 'spec.template.'
  name: resource
  namespace: vela-system
spec:
  appliesToWorkloads:
    - deployments.apps
    - statefulsets.apps
    - daemonsets.apps
    - jobs.batch
    - cronjobs.batch
  podDisruptive: true
  schematic:
    cue:
      template: |
        // +patchStrategy=jsonMergePatch

        // Define just the resources block once
        let resourceContent = {
        	resources: {
        		// if cpu or memory at root â†’ set both requests+limits
        		if parameter.cpu != _|_ || parameter.memory != _|_ {
        			// +patchStrategy=retainKeys
        			requests: {
        				if parameter.cpu != _|_ {cpu: parameter.cpu}
        				if parameter.memory != _|_ {memory: parameter.memory}
        			}
        			// +patchStrategy=retainKeys
        			limits: {
        				if parameter.cpu != _|_ {cpu: parameter.cpu}
        				if parameter.memory != _|_ {memory: parameter.memory}
        			}
        		}

        		// if separate requests block provided
        		if parameter.requests != _|_ {
        			// +patchStrategy=retainKeys
        			requests: {
        				if parameter.requests.cpu != _|_ {cpu: parameter.requests.cpu}
        				if parameter.requests.memory != _|_ {memory: parameter.requests.memory}
        			}
        		}

        		// if separate limits block provided
        		if parameter.limits != _|_ {
        			// +patchStrategy=retainKeys
        			limits: {
        				if parameter.limits.cpu != _|_ {cpu: parameter.limits.cpu}
        				if parameter.limits.memory != _|_ {memory: parameter.limits.memory}
        			}
        		}
        	}
        }

        // Top-level patch that applies resourceContent into both
        // spec.template.spec.containers and spec.jobTemplate...
        patch: {
        	// for Pod/Deployment/StatefulSet/DaemonSet
        	spec: template: spec: {
        		// +patchKey=name
        		containers: [resourceContent]
        	}
        	// for Job/CronJob
        	spec: jobTemplate: spec: template: spec: {
        		// +patchKey=name
        		containers: [resourceContent]
        	}
        }

        parameter: {
        	// +usage=Specify the amount of cpu for both requests and limits
        	cpu?: *1 | number | string
        	// +usage=Specify the amount of memory for both requests and limits
        	memory?: *"2048Mi" | =~"^([1-9][0-9]{0,63})(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$"
        	// +usage=Specify custom requests
        	requests?: {
        		cpu?:    *1 | number | string
        		memory?: *"2048Mi" | =~"^([1-9][0-9]{0,63})(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$"
        	}
        	// +usage=Specify custom limits
        	limits?: {
        		cpu?:    *1 | number | string
        		memory?: *"2048Mi" | =~"^([1-9][0-9]{0,63})(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$"
        	}
        }

